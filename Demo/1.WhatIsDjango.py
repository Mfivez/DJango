# Nous allons travailler dans le cadre de ce cours avec le framework Django. Mais avant d'attaquer le cours posons nous la question qu'est-ce qu'un framework, puis qu'est-ce que Django ?

""" 1. Qu'est-ce qu'un framework :
- Si nous le traduisons litt√©ralement, framework signifie cadre de travail.

- Un framework vise √† apporter aux d√©veloppeurs des outils visant √† simplifier le d√©veloppement de programmes comme, par exemple, des sites webs.

- Comment ?
    Et bien, lorsqu'on d√©veloppe des applications, il y a (presque) toujours des choses qui sont communes √† la majorit√© des programmes. Les frameworks font donc tous leur possible pour offrir ces bases aux d√©veloppeurs afin qu'ils puissent se concentrer sur les particularit√©s de leur projet en leur faisant gagner √©norm√©ment de temps.

- Niveau avantages ?
    - Un framework instaure en quelque sorte une ¬´ ligne de conduite ¬ª. 
    - Tous les d√©veloppeurs Django codent de fa√ßon assez homog√®ne (leurs codes ont le m√™me fonctionnement et applique les m√™mes principes). 
    - De ce fait, lorsqu'un d√©veloppeur rejoint un projet utilisant un framework qu'il conna√Æt d√©j√†, il comprendra tr√®s vite ce projet et pourra se mettre rapidement au travail
"""

# Maintenant que nous savons ce qu'est un framework et ce que sont ses objectifs, qu'en est-il du framework Django ?


""" Du coup, Django c'est quoi ?
    - Un framework python destin√© au web.
    
    - Django vit le jour en 2003, dans une agence de presse qui visait √† d√©velopper des sites webs plut√¥t complets. Il f√ªt ensuite publi√© en 2005 et trouva tr√®s rapidement succ√®s et communaut√©  gr√¢ce √† sa robustesse ou encore sa gestion de la s√©curit√© le menant √† √™tre tr√®s utilis√© m√™me par des g√©ants de ce monde telles qu'Instagram, Pinterest ou m√™me encore la Nasa.

    - Pourquoi ce succ√®s ?
        - Django applique avec excellence le principe nomm√© "don't repeat yourself". En django ce que l'on fait, on ne le fait qu'une fois !
        - De plus comme dit pr√©c√©demment, le framework poss√®de une large communaut√© l'aidant √† se d√©velopper continuellement et une documentation tr√®s tr√®s compl√®te.
"""

# Et si on parlait du paradigme du MVC ? 

""" C'est quoi un paradigme ?
    - Un paradigme en programmation est une approche ou un style de programmation bas√© sur un ensemble de concepts et de principes. Il d√©termine la mani√®re dont les d√©veloppeurs structurent et √©crivent leur code, par exemple, la programmation orient√©e objet.
"""

""" Et du coup, c'est quoi le MVC :

    - Dans un premier temps d√©composons cet acronyme :
    - M : Mod√®le.
    - V : Vue.
    - C : Contr√¥leur.
"""

""" Le Mod√®le : 
    1. R√¥le :
        - Il repr√©sente les donn√©es de l'application et les r√®gles de gestions associ√©es.

        - Il est charg√© de g√©rer l'acc√®s √† la base de donn√©es, d'effectuer les requ√™tes et de renvoyer les donn√©es sous un format exploitable.

    2. Exemple : 
        - Tu d√©veloppes un site de gestion de biblioth√®que. 
        Le mod√®le serait la partie qui d√©finit ce qu'est un "Livre" (titre, auteur,...), comment les livres sont stock√©s dans la base de donn√©es, et comment les r√©cup√©rer ou les modifier.
"""

""" La Vue : 
    1. R√¥le :
        - Elle est responsable de l'affichage des donn√©es √† l'utilisateur. 

        - Elle prend les donn√©es du mod√®le et les pr√©sente sous forme d'interface utilisateur (UI), que ce soit sous forme de pages HTML, de JSON, ou autre.

    2. Exemple : 
        - Dans notre site de gestion de biblioth√®que, une vue pourrait √™tre une page qui affiche la liste des livres disponibles. Elle re√ßoit les donn√©es du mod√®le et les affiche dans une liste lisible pour l'utilisateur.
"""

""" Le Contr√¥ler: 
    1. R√¥le :
        - Il agit comme un interm√©diaire entre le mod√®le et la vue. 
        
        - Il re√ßoit les entr√©es utilisateur (par exemple, via des formulaires ou des URL), interagit avec le mod√®le pour traiter ces donn√©es, et d√©cide quelle vue renvoyer √† l'utilisateur.

    2. Exemple : 
        -  Si un utilisateur recherche un livre particulier, le contr√¥leur va recevoir cette requ√™te, demander au mod√®le de r√©cup√©rer les livres correspondant √† la recherche, puis passer ces informations √† la vue qui les affichera.
"""

""" Petit sch√©ma :

- [User] int√©ragit avec [Une vue üñ•Ô∏è] (une page internet)

- [La vue] envoie la requ√™te au [Contr√¥ler].

- Le [Contr√¥ler] demande au [Mod√®le] ce dont il a besoin dans la db.

- La[DB] envoie les donn√©es au [Contr√¥ler]

- Le [Contr√¥ler] renvoie une nouvelle vue avec les donn√©es trait√©es √† l'utilisateur.

"""

# Ok, mais Django dans tout √ßa ? Le MVT.

"""  Django et le MVT ?

    - Django applique un mod√®le tr√®s similaire au MVC, mais avec une l√©g√®re variation. 
    Le concept reste le m√™me, mais la terminologie et le r√¥le de certains composants sont un peu ajust√©s.

"""

""" D√©composons l'acronyme MVT :
    M : Mod√®le
    V : Vue
    T : Template
"""

""" Le Mod√®le :

    - Identique au MVC : 
        Le mod√®le en Django est exactement ce que nous avons d√©crit pour le MVC. Il g√®re les donn√©es, la logique de l'application, et les interactions avec la base de donn√©es.

    - Exemple : 
        Dans Django, tu d√©finirais un mod√®le "Book" qui sp√©cifie comment un livre est repr√©sent√© dans la base de donn√©es.

"""

""" La vue :

    - R√¥le l√©g√®rement diff√©rent : 
        Dans Django, la vue n'est pas responsable de l'affichage comme dans le MVC. 
    
        Au lieu de cela, la vue en Django est un contr√¥leur qui g√®re la logique m√©tier. 
    
        Elle traite les requ√™tes HTTP, interagit avec le mod√®le pour obtenir les donn√©es n√©cessaires, et s√©lectionne le template appropri√© pour g√©n√©rer la r√©ponse.

    - Exemple : 
        Une vue Django pourrait traiter une requ√™te pour afficher tous les livres disponibles. Elle r√©cup√®re la liste des livres du mod√®le et les transmet √† un template pour affichage.

"""

""" Le Template :

    - Remplace la Vue du MVC : 
        Le template dans Django est responsable de l'affichage. 
        
        C'est un fichier HTML avec des balises sp√©cifiques de Django pour int√©grer dynamiquement les donn√©es transmises par la vue.

    - Exemple : 
        Le template pourrait √™tre un fichier HTML qui re√ßoit la liste des livres et les affiche sous forme de tableau ou de liste, avec un design d√©fini par le d√©veloppeur.

"""